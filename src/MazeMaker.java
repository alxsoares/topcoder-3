import java.util.LinkedList;
import java.util.Queue;

public class MazeMaker {

    private static class Unit {
        public int x;
        public int y;

        private Unit(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    private String[] m_maze;
    private int m_n;
    private int m_m;
    private int[] m_moveRow;
    private int[] m_moveCol;

    private int[][] m_steps;
    private Queue<Unit> m_queue = new LinkedList<Unit>();

    private boolean isAccessible(int x, int y) {
        if (x < 0 || x >= m_n || y < 0 || y >= m_m) {
            return false;
        }
        return m_maze[x].charAt(y) == '.';
    }

    public int longestPath(String[] maze, int startRow, int startCol, int[] moveRow, int[] moveCol) {
        m_maze = maze;
        m_n = maze.length;
        m_m = maze[0].length();
        m_steps = new int[m_n][m_m];
        for (int i = 0; i < m_n; i++) {
            for (int j = 0; j < m_m; j++) {
                m_steps[i][j] = Integer.MAX_VALUE;
            }
        }
        m_moveRow = moveRow;
        m_moveCol = moveCol;
        m_steps[startRow][startCol] = 0;
        m_queue.add(new Unit(startRow, startCol));
        while (!m_queue.isEmpty()) {
            Unit unit = m_queue.remove();
            int nextStep = m_steps[unit.x][unit.y] + 1;
            for (int k = 0; k < m_moveRow.length; k++) {
                int dx = unit.x + m_moveRow[k];
                int dy = unit.y + m_moveCol[k];
                if (isAccessible(dx, dy) && m_steps[dx][dy] == Integer.MAX_VALUE) {
                    m_steps[dx][dy] = nextStep;
                    m_queue.add(new Unit(dx, dy));
                }
            }
        }
        int max = -1;
        for (int i = 0; i < m_n; i++) {
            for (int j = 0; j < m_m; j++) {
                if (isAccessible(i, j)) {
                    int step = m_steps[i][j];
                    if (step == Integer.MAX_VALUE) {
                        return -1;
                    } else if (step > max) {
                        max = step;
                    }
                }
            }
        }
        return max;
    }

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        MazeMaker t = new MazeMaker();
        int r = t.longestPath(new String[]
                {
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        "..................................................",
                        ".................................................."
                }, 0, 0, new int[]{1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0},
                new int[]{0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0});
        System.out.println("res = " + r);
        long dur = System.currentTimeMillis() - start;
        System.out.println("dur=" + dur);
    }
}
